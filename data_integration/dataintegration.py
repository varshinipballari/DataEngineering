# -*- coding: utf-8 -*-
"""DataIntegration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yv6UmitZK5aR_rocMwC7gummhyJ51vur
"""

import pandas as pd
import csv
from google.colab import files

uploaded = files.upload()

cases_df = pd.read_csv("covid_confirmed_usafacts.csv")
deaths_df = pd.read_csv("covid_deaths_usafacts.csv")
census_df = pd.read_csv("acs2017_county_data.csv")

cases_df = cases_df[["County Name", "State", "2023-07-23"]]
deaths_df = deaths_df[["County Name", "State", "2023-07-23"]]

census_df = census_df[["County", "State", "TotalPop", "IncomePerCap", "Poverty", "Unemployment"]]

print("cases_df columns:", cases_df.columns.tolist())
print("deaths_df columns:", deaths_df.columns.tolist())
print("census_df columns:", census_df.columns.tolist())

cases_df["County Name"] = cases_df["County Name"].str.strip()
deaths_df["County Name"] = deaths_df["County Name"].str.strip()

washington_cases = cases_df[cases_df["County Name"] == "Washington County"]
print("Washington County in cases:", len(washington_cases))

washington_deaths = deaths_df[deaths_df["County Name"] == "Washington County"]
print("Washington County in deaths:", len(washington_deaths))

cases_df = cases_df[cases_df["County Name"] != "Statewide Unallocated"]
deaths_df = deaths_df[deaths_df["County Name"] != "Statewide Unallocated"]
print("Remaining rows in cases:", len(cases_df))
print("Remaining rows in deaths:", len(deaths_df))

us_state_to_abbrev = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "Virgin Islands, U.S.": "VI",
}

# invert the dictionary
abbrev_to_us_state = dict(map(reversed, us_state_to_abbrev.items()))

cases_df["State"] = cases_df["State"].map(abbrev_to_us_state)
deaths_df["State"] = deaths_df["State"].map(abbrev_to_us_state)

print(cases_df.head())

cases_df["key"] = cases_df["County Name"] + ", " + cases_df["State"]
deaths_df["key"] = deaths_df["County Name"] + ", " + deaths_df["State"]
census_df["key"] = census_df["County"] + ", " + census_df["State"]

cases_df.set_index("key", inplace=True)
deaths_df.set_index("key", inplace=True)
census_df.set_index("key", inplace=True)

print(census_df.head())

cases_df.rename(columns={"2023-07-23": "Cases"}, inplace=True)
deaths_df.rename(columns={"2023-07-23": "Deaths"}, inplace=True)

print("cases_df columns:", cases_df.columns.values.tolist())
print("deaths_df columns:", deaths_df.columns.values.tolist())

join_df = cases_df.join(deaths_df[["Deaths"]])
join_df = join_df.join(census_df[["TotalPop", "IncomePerCap", "Poverty", "Unemployment"]])

join_df["CasesPerCap"] = join_df["Cases"] / join_df["TotalPop"]
join_df["DeathsPerCap"] = join_df["Deaths"] / join_df["TotalPop"]

print("Number of rows in join_df:", len(join_df))

correlation_matrix = join_df.corr(numeric_only=True)
print(correlation_matrix)

import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)

plt.title('Correlation Matrix Heatmap')
plt.show()